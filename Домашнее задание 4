"""
Задание 1
Напишите функцию, которая принимает на вход строку и проверяет, является ли она валидным транспортным номером (1 буква, 3 цифры, 2 буквы, 2–3 цифры). Обратите внимание, что не все буквы кириллического алфавита используются в транспортных номерах.
Если номер валиден, то функция должна возвращать отдельно номер и регион.

Примеры работы программы:
  car_id = 'А222BС96'
  Результат: Номер А222BС валиден. Регион: 96.

  car_id = 'АБ22ВВ193'
  Результат: Номер не валиден.
"""

import re


def plate_validator(car_id):
    """Валидатор автомобильных номеров российского образца с извлечением кода региона."""
    if pattern := re.fullmatch(r'([АВЕКМНОРСТХУ]\d{3}[АВЕКМНОРСТХУ]{2})(\d{2,3})', car_id):
        plate = pattern.group(1)  # Основная часть номера
        region = pattern.group(2) #  Код региона
        print(f'Номер {plate} валиден. Регион: {region}')
    else:
        print('Номер не валиден.')


# Тестирование функции
car_id = 'А222ВС96'  # Валидный номер
# car_id = 'АБ22ВВ193'  # Невалидный номер

plate_validator(car_id)


"""
Задание 2
Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений.

Пример работы программы:
  some_string = 'Напишите функцию функцию, которая будет будет будет будет удалять все все все все последовательные повторы слов из из из из заданной строки строки при помощи регулярных выражений'
  Результат: Напишите функцию, которая будет удалять все последовательные повторы слов из заданной строки при помощи регулярных выражений.
"""

import re


def remove_duplicates(text):
    """Удаляет последовательные повторы (дубликаты) слов из текста."""
    # Регулярное выражение для поиска последовательных дубликатов:
    # \b(\w+)\b - слово (группа 1)
    # [,\s]+    - возможные запятые/пробелы между словами
    # \1        - то же слово (дубликат)
    # \b        - граница слова
    pattern = r'\b(\w+)\b[,\s]+\1\b'
    
    # Цикл замены повторов до тех пор, пока есть изменения
    previous_text = ""
    while text != previous_text:
        previous_text = text
        text = re.sub(pattern, r'\1', text)
    
    return text

# Тестирование функции
some_string = 'Напишите функцию функцию, которая будет будет будет будет удалять все все все все последовательные повторы слов из из из из заданной строки строки при помощи регулярных выражений'

remove_duplicates(some_string)
