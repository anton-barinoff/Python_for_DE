"""
Задание 1
Дана переменная, в которой хранится словарь, содержащий геометки для каждого пользователя (пример структуры данных приведён ниже). Вам нужно написать программу, которая выведет на экран множество уникальных геометок всех пользователей.

Пример работы программы:
ids = {
  'user1': [213, 213, 213, 15, 213],
  'user2': [54, 54, 119, 119, 119],
  'user3': [213, 98, 98, 35]
}

Результат: {98, 35, 15, 213, 54, 119}
"""

ids = {
    'user1': [213, 213, 213, 15, 213],
    'user2': [54, 54, 119, 119, 119], 
    'user3': [213, 98, 98, 35]
}

unique_geotags = set().union(*ids.values())  # Объединяем списки, чтобы избавиться от дубликатов
print(unique_geotags)


"""
Задание 2
Дана переменная, в которой хранится список поисковых запросов пользователя (пример структуры данных приведён ниже). Вам нужно написать программу, которая выведет на экран распределение количества слов в запросах в требуемом виде.

Пример работы программы:
queries = [
  'смотреть сериалы онлайн',
  'новости спорта',
  'афиша кино',
  'курс доллара',
  'сериалы этим летом',
  'курс по питону',
  'сериалы про спорт',
]
Результат:
  Поисковых запросов, содержащих 2 слов(а): 42.86%
  Поисковых запросов, содержащих 3 слов(а): 57.14%
"""

# Создание словаря для записи количества слов в запросах (ключ) и количества повторений (значение)
counts = {}

for query in queries:
    words_count = len(query.split())  # Количество слов в каждом элементе списка 

    # Добавление подсчёта в словарь 
    counts.setdefault(words_count, 0)   # Если ключа нет - создать со значением 0
    counts[words_count] += 1     

# Подсчёт распределения количества слов в запросах (%)
total = sum(counts.values())  # Общее количество повторений
for word_count, count in counts.items():
    percent_value = (count / total) * 100
    print(f"Поисковых запросов, содержащих {word_count} слов(а): {percent_value:.2f}%")
